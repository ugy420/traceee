import React, { useState, useEffect } from 'react';
import { View, StyleSheet, PanResponder } from 'react-native';
import Svg, { Path, Defs, ClipPath, G } from 'react-native-svg';
import { getStroke } from 'perfect-freehand';
import { getSvgPathFromStroke } from '../utils/getSvgFromStroke';

const options = {
  size: 40,
  smoothing: 1,
  streamline: 1,
  easing: (t: number) => t,
  start: {
    taper: 0,
    easing: (t: number) => t,
    cap: true,
  },
  end: {
    taper: 0,
    easing: (t: number) => t,
    cap: true,
  },
};

interface DrawingCanvasProps {
  clear: boolean;
}

const DrawingCanvas: React.FC<DrawingCanvasProps> = ({ clear }) => {
  const [points, setPoints] = useState<number[][]>([]);
  const [pathData, setPathData] = useState<string>('');

  useEffect(() => {
    if (clear) {
      setPoints([]);
    }
  }, [clear]);

  useEffect(() => {
    const stroke = getStroke(points, options);
    const path = getSvgPathFromStroke(stroke);
    setPathData(path);
  }, [points]);

  const clipPathData = 'M95.95 33.04H88.46C84.89 33.04 80.19 34.59 74.37 37.68C68.54 40.77 62.95 45.47 57.6 51.77C52.25 58.07 47.61 65.92 43.69 75.31C39.77 84.71 37.8 95.71 37.8 108.31C37.8 117.58 37.86 126.27 37.98 134.35C38.1 142.44 38.16 148.98 38.16 153.97C38.16 158.02 36.32 160.93 32.63 162.71C28.94 164.49 25.55 165.39 22.46 165.39C19.37 165.39 16.45 164.14 13.72 161.64C10.98 159.14 8.19002 154.33 5.34002 147.19C3.43002 140.06 2.31002 132.51 1.95002 124.54C1.59002 116.57 1.41002 108.43 1.41002 100.1C1.41002 91.06 1.53002 82.15 1.77002 73.35C2.00002 64.55 2.96002 56.17 4.62002 48.2C6.28002 40.23 8.90002 32.74 12.47 25.73C16.04 18.72 21.15 12.48 27.81 6.99999C28.76 5.80999 30.54 4.44999 33.16 2.89999C35.77 1.35999 37.68 0.579987 38.87 0.579987C40.77 0.579987 41.96 0.879987 42.44 1.46999C42.91 2.06999 43.15 2.83999 43.15 3.78999C43.15 5.21999 42.67 7.11999 41.72 9.49999C40.77 11.88 39.76 14.38 38.69 16.99C37.62 19.61 36.61 22.22 35.66 24.84C34.71 27.46 34.23 29.72 34.23 31.62C34.23 32.81 34.59 33.4 35.3 33.4C40.77 26.74 45.41 21.27 49.21 16.99C53.01 12.71 57.35 9.31999 62.23 6.81999C67.1 4.31999 73.17 2.65999 80.42 1.82999C87.67 0.999987 97.36 0.579987 109.49 0.579987C123.76 0.579987 135.29 1.46999 144.09 3.25999C152.89 5.03999 159.72 7.71999 164.6 11.29C169.47 14.86 172.74 19.32 174.41 24.67C176.07 30.02 176.91 36.26 176.91 43.4C176.91 45.07 176.73 46.91 176.37 48.93C176.01 50.95 175.53 53.39 174.94 56.24C174.34 59.09 173.87 62.54 173.51 66.59C173.15 70.64 172.97 75.51 172.97 81.22C172.97 88.12 173.38 95.02 174.22 101.91C175.05 108.81 176 115.23 177.07 121.17C178.14 127.12 179.09 132.29 179.92 136.69C180.75 141.09 181.17 144 181.17 145.43C181.17 148.05 179.15 150.25 175.11 152.03C171.06 153.81 167.5 154.71 164.41 154.71C160.36 154.71 156.14 153.11 151.75 149.89C147.35 146.68 142.71 143.17 137.84 139.37C132.96 135.57 127.91 132.06 122.68 128.85C117.45 125.64 111.98 124.03 106.27 124.03C104.36 124.03 102.22 124.45 99.85 125.28C97.47 126.12 95.03 126.95 92.54 127.78C90.04 128.62 87.55 129.45 85.05 130.28C82.55 131.12 80.23 131.53 78.09 131.53C72.86 131.53 68.75 130.82 65.78 129.39C62.8 127.96 61.32 125.23 61.32 121.18C61.32 117.85 62.27 113.39 64.17 107.8C66.07 102.22 68.45 96.15 71.3 89.61C74.15 83.07 77.3 76.47 80.75 69.81C84.19 63.15 87.41 57.15 90.38 51.79C93.35 46.44 95.91 42.1 98.05 38.77C100.19 35.44 101.38 33.78 101.62 33.78C100.43 33.31 98.53 33.07 95.91 33.07L95.95 33.04ZM141.07 104.03C140.71 103.56 140.36 102.78 140 101.71C139.64 100.64 139.34 98.98 139.11 96.72C138.87 94.46 138.75 90.96 138.75 86.2C138.75 81.21 138.87 76.33 139.11 71.57C139.34 66.82 139.64 62.47 140 58.55C140.36 54.63 140.65 51.36 140.89 48.74C141.12 46.13 141.25 44.34 141.25 43.39C136.73 43.39 132.87 45.06 129.66 48.38C126.45 51.71 123.53 55.87 120.92 60.87C118.3 65.86 115.93 71.16 113.79 76.74C111.65 82.33 109.51 87.39 107.37 91.9C107.6 91.67 108.14 91.49 108.98 91.36C109.81 91.24 110.59 91.18 111.3 91.18C114.15 91.18 118.43 92.31 124.14 94.57C129.85 96.83 135.67 100.7 141.62 106.16C141.62 105.21 141.44 104.5 141.08 104.02L141.07 104.03Z';

  const panResponder = PanResponder.create({
    onStartShouldSetPanResponder: () => true,
    onPanResponderMove: (evt) => {
      const { locationX, locationY } = evt.nativeEvent;
      setPoints(prev => [...prev, [locationX, locationY]]);
    }
  });

  return (
    <View style={styles.container} {...panResponder.panHandlers}>
      <Svg style={styles.svg}>
        <Defs>
          <ClipPath id="clip">
            <Path d={clipPathData} fill='none' /> 
          </ClipPath>
        </Defs>
        <G clipPath="url(#clip)">
          <Path d={pathData} stroke="black" strokeWidth={1} fill="black" />
          <Path d={clipPathData} stroke="black" strokeWidth={1} fill="none" />
        </G>
      </Svg>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 20,
    backgroundColor: '#ffffff',
  },
  svg: {
    flex: 1,
    backgroundColor: 'white',
  },
});

export default DrawingCanvas;